# Revision 1 C.C rev12

Codename: Baby Amethyst

STATUS: NOT FINISHED

Amethyst 0.8 Info
=================

Amethyst 0.8 is a downgrade from the v1.0 by removing Execute Bytes.


Arguments
=========
R		Data Register
I		Intermediate Number
L		Label
B		Boolean Value

Defines
=======
Data		Register OR intermediate number


Instructions
============
nop				No Instruction
mov R/I R		Move(Copy) data to register
swp R R			Swaps registers
jmp L			Jump to label
slp I			(Platform specific) Sleep
sdf B			Set Defined Flag
add R/I			Add
sub R/I			Subtract
and R/I			AND bitwise
orr R/I			OR bitwise
xor R/I			XOR bitwise
not				NOT bitwise ACC
lsf I			Left Shift
rsf I			Right Shift
cal L			Save current ROM index to register IDX and jump
ret				Return to ROM index specified in register IDX
beq R/I R/I L	Branch if Equal
bgt R/I R/I L	Branch if Greater Than
blt R/I R/I L	Branch if Less Than
bcp R/I R/I L	Branch by Compare Table
bdf B L			Branch if Defined Flag is equal with argument

Registers
=========
General Purpose Registers
  ACC	Accumulator
  DAT	Data
  SAV	Save
-------------------------
Index Registers
  IDX	ROM Index
---------------
Read-Only Registers
  PRC	ROM Program Counter
-------------------


Unsorted by bytecode
====================

instr code 00  19    20    21    03   04   05     
BC size    1   3     3     3     2    2    2
  Mnenomic nop mov   mov   swp   jmp  slp  sdf
   operand NOP MOVir MOVrr SWPrr JMPl SLPi SDFb
 Argument1     √     √     √     √    √    √
 Argument2     √     √     √
 Argument3

instr code 06   07   08   09   10   11   12   13   14   15   02  16   17   18    01
   BC size 2    2    2    2    2    2    2    2    2    2    1   2    2    2     1 
  Mnenomic add  add  sub  sub  and  and  orr  orr  xor  xor  not lsf  rsf  call  ret
   operand ADDi ADDr SUBi SUBr ANDi ANDr ORRi ORRr XORi XORr NOT LSFi RSFi CALLl RET
 Argument1 √    √    √    √    √    √    √    √    √    √        √    √    √         
 Argument2 
 Argument3 

instr code 22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    
   BC size 4     4     4     4     4     4     4     4     4     4     4     4     4     4     4     4     4
  Mnenomic beq   beq   beq   beq   bgt   bgt   bgt   bgt   blt   blt   blt   blt   bcp   bcp   bcp   bcp   bdf   
   operand BEQii BEQir BEQri BEQrr BGTii BGTir BGTri BGTrr BLTii BLTir BLTri BLTrr BCPii BCPir BCPri BCPrr BDFbl
 Argument1 √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     
 Argument2 √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     
 Argument3 √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     

Sorted by bytecode sizes
========================

instr code 00  01  02  03   04   05   06   07   08   09   10   11   12   13   14   15   16   17   18     19    20    21   
BC size    1   1   1   3    3    3    2    2    2    2    2    2    2    2    2    2    2    2    2      3     3     3
  Mnenomic nop ret not jmp  slp  sdf  add  add  sub  sub  and  and  orr  orr  xor  xor  lsf  rsf  call   mov   mov   swp
   operand NOP RET NOT JMPl SLPi SDFb ADDi ADDr SUBi SUBr ANDi ANDr ORRi ORRr XORi XORr LSFi RSFi CALLl  MOVir MOVrr SWPrr 
 Argument1             √    √    √    √    √    √    √    √    √    √    √    √    √    √    √    √      √     √     √
 Argument2                                                                                               √     √     √
 Argument3

instr code 22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    
   BC size 4     4     4     4     4     4     4     4     4     4     4     4     4     4     4     4     4
  Mnenomic beq   beq   beq   beq   bgt   bgt   bgt   bgt   blt   blt   blt   blt   bcp   bcp   bcp   bcp   bdf   
   operand BEQii BEQir BEQri BEQrr BGTii BGTir BGTri BGTrr BLTii BLTir BLTri BLTrr BCPii BCPir BCPri BCPrr BDFbl
 Argument1 √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     
 Argument2 √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     
 Argument3 √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     √     

Instruction Size Ranges

1: 00 to 02
2: 03 to 18
3: 19 to 21
4: 22 to 38


Parsing Example
===============


C Example

```c
int instruction_size = 0;
int INDEX = 0;


for (; INDEX > PROGRAMMEMORYSIZE; )

if (PRGMMEM[INSTRUCTION] >= 0 && PRGMMEM[INSTRUCTION] <= 2)
{
	instruction_size = 1;
}
else if (PRGMMEM[INSTRUCTION] >= 3 && PRGMMEM[INSTRUCTION] <= 18)
{
	instruction_size = 2;
}
else if (PRGMMEM[INSTRUCTION] >= 19 && PRGMMEM[INSTRUCTION] <= 21)
{
	instruction_size = 3;
}
else if (PRGMMEM[INSTRUCTION] >= 22 && PRGMMEM[INSTRUCTION] <= 38)
{
	instruction_size = 4;
}
else
{
	// ERROR
}

switch (PRGMMEM[i])
{
	case 0:
		goto DONE;
	break;

	case 1:
		INDEX = registers[IDX]
		goto DONE;
	break;
}
DONE:
INDEX = INDEX + instruction_size;
// Update things. GUI, etc.

```


















